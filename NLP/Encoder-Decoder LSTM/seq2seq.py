# -*- coding: utf-8 -*-
"""seq2seq

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FH4QNBk53BzEeAYIoFcVPbh73hem5s_J
"""

import torch
import random
from torch import nn

class Encoder(nn.Module):
    def __init__(self, input_size, embedding_size, hidden_size, layers, p):
        super(Encoder, self).__init__() 
        # Input size is source language vocabulary size       
        self.embedding = nn.Embedding(input_size, embedding_size)
        self.RNN = nn.LSTM(input_size=embedding_size, hidden_size=hidden_size, num_layers=layers, dropout=p)
        self.dropout = nn.Dropout(p=p)

    def forward(self,x):
        x = self.dropout(self.embedding(x))
        outputs, (hidden, cell) = self.RNN(x)
        return hidden, cell


class Decoder(nn.Module):
    def __init__(self, input_size, output_size, embedding_size, hidden_size, layers, p):
        super(Decoder, self).__init__()        
        # Output size is target language vocabulary size
        self.RNN = nn.LSTM(input_size=embedding_size, hidden_size=hidden_size, num_layers=layers, dropout=p)
        self.embedding = nn.Embedding(input_size, embedding_size) 
        self.dense = nn.Linear(hidden_size, output_size)
        self.dropout = nn.Dropout(p=p)
        self.output_size = output_size

    def forward(self, x, state):
        x = self.dropout(self.embedding(x))
        outputs, (hidden, cell) = self.RNN(x, state)
        return self.dense(outputs)

class Seq2Seq(nn.Module):
    def __init__(self, encoder, decoder):
        super(Seq2Seq, self).__init__()
        self.encoder = encoder
        self.decoder = decoder

    def forward(self, source, target, flip=False, force_ratio=0.5):
        target_len, batch = target.shape
        outputs = torch.zeros(target_len, batch, self.decoder.output_size)

        hidden, cell = self.encoder(source)

        if flip:
            target = torch.flip(target, [0])

        x = target[0].unsqueeze(0)

        for t in range(1,target_len):
            output = self.decoder(x, (hidden, cell))
            outputs[t] = output
            
            pred = output.argmax(2)

            if random.random() > force_ratio:
                x = target[t].unsqueeze(0)
            else:
                x = pred

        return outputs

if __name__ == '__main__':
    source = torch.randint(high = 100, size = (27,128))
    target = torch.randint(high = 100, size = (31,128))
    enc = Encoder(input_size=7863, embedding_size=100, hidden_size=16, layers=2, p=0.5)
    dec = Decoder(input_size=5863, output_size=5863, embedding_size=100, hidden_size=16, layers=2, p=0.5)
    seq = Seq2Seq(enc, dec)
    out = seq(source, target, flip=True)
    print(out.shape)